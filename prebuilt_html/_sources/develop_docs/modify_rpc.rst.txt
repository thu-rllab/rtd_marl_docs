.. _chap_modify_rpc:

===================================
dist-MARL 的分布式框架介绍
===================================



简介
===================================

现有分布式框架基于 *gRPC* (v1.31.0) 和 *Protobuf* (>=3.19.0, <3.21.0)，同时主要针对 Cooperative Multi-agent Reinforcement Learning 的情形进行设计开发。

*gRPC* 基于 http/2 设计，具有双向流、多路复用请求等特性，同时支持 *C++、Python、Go* 等语言，客户端和服务端支持多语言混合开发环境，因此十分易于兼容不同的平台（包括移动平台）。


.. _chap_modify_rpc-sec_distributed_framework_structure:

模块结构
===================================


.. sidebar:: distributed_framework
    
    * :bdg-warning:`actor_service`
    * :bdg-warning:`batching_operator_service`
    * :bdg-info:`basic`
    * :bdg-info:`data_type`
    * :bdg-info:`messages`
    * :bdg-warning:`parameter_service`
    * :bdg-info:`protos`
    * :bdg-warning:`replay_buffer_service`
    * :bdg-warning:`simulator`
    * :bdg-dark-line:`__init__.py`
    * :bdg-dark-line:`run_modules.py`


分布式框架的代码位于目录 :file:`src/distributed_framework` 内，具体的目录结构如右侧所示。

其中， :bdg-info:`<basic_module>` 表示其属于基础模块， :bdg-info:`protos` 中包含了最基础的由 *proto3* 所定义的 rpc 服务及基本通信数据类型， :bdg-info:`data_type` 与  :bdg-info:`messages` 内则为由 *gRPC* 所生成的基本数据类型和通信消息类型， :bdg-info:`basic` 模块中定义了客户端与服务端的基类与基础方法。

相对应的，:bdg-warning:`<dist_module>` 表示其为分布式框架中与 RL 相关的模块，以 *_service* 结尾的目录中存放了多智能体分布式框架的主要模块（包含相应服务端和客户端），:bdg-warning:`simulator` 则是包含环境 (env) 以及其和多智能体系统交互的模块。


.. _chap_modify_rpc-sec_distributed_framework_intro:

模块介绍
===================================
本节中将首先对 :bdg-info:`<basic_module>` 基础模块进行介绍，而后简要介绍 :bdg-warning:`<dist_module>` 分布式模块的主要功能。


.. _chap_modify_rpc-sec_distributed_framework_intro-subsec_basic:

:bdg-info:`basic`
++++++++++++++++++++++++++++++++++
本模块中分别在 :file:`base_server.py` 和 :file:`base_client.py` 中定义了 *gRPC* 服务端基类和客户端基类及其基本方法，所有服务的服务端和客户端均继承了对应基类而实现。


.. _chap_modify_rpc-sec_distributed_framework_intro-subsec_data_type:

:bdg-info:`data_type`
++++++++++++++++++++++++++++++++++
本模块中包含了由 :file:`protos/data_type/<data_type>.proto` 所定义并生成的、可由 *gRPC* 传输的数据结构： ``array, torch_tensor, batch`` ，其中前二者分别对应 ``numpy.ndarray, torch.tensor``，而 ``batch`` 则是本框架主要推荐使用的基础数据结构。
在各个数据类型相应的目录下，:file:`utils.py` 文件中则定义了相应的序列化和反序列化方法。


.. _chap_modify_rpc-sec_distributed_framework_intro-subsec_messages:

:bdg-info:`messages`
++++++++++++++++++++++++++++++++++
本模块中为由 :file:`protos/messages.proto` 所定义并生成的、 *gRPC* 远程调用时的基本消息类型。当需要添加新消息类型时，只需在 :file:`protos/messages.proto` 中进行定义，并使用 ``grpc_python_plugin`` 重新生成相应 :file:`messages_pb2.py` 即可，具体请参照章节 :ref:`chap_modify_rpc-sec_update_distributed_framework` 。


.. _chap_modify_rpc-sec_distributed_framework_intro-subsec_protos:

:bdg-info:`protos`
++++++++++++++++++++++++++++++++++
本模块中包含了最基础的由 *proto3* 所定义的各个服务的 rpc 方法 ( :file:`protos/<dist_module>.proto` )、基本的数据结构 (:file:`protos/data_type/<data_type>.proto`)。
:file:`<file_name>.proto` 的文件遵循 *proto3* 的语法格式，在此以 :file:`<actor.proto>` 为例进行简要说明。

.. code-block:: proto
    :caption: src/distributed_framework/protos/actor.proto
    :linenos:
    :force:
    :name: chap_modify_rpc-sec_distributed_framework_intro-subsec_protos-code_actor_proto

    syntax = "proto3";

    package distributed_framework.actor_service;

    // load ``message`` module
    import "messages.proto";


    service ActorService {
        // func ``InitCall()`` is used to establish the connections between the servicer and clients.
        // Besides, simple data will be transferred by the pipeline sometimes.
        rpc InitCall (distributed_framework.messages.InitRequest) returns (distributed_framework.messages.InitResponse);

        // func ``BatchAct()`` is used by clients to call for actions.
        rpc BatchAct (distributed_framework.messages.DataSubmission) returns (distributed_framework.messages.DataResponse);

        // func ``SendData()`` is used for transfering general data.
        rpc SendData (distributed_framework.messages.DataSubmission) returns (distributed_framework.messages.DataResponse);

        // func ``UpdateParams()`` is used for signaling the actors to update their model parameters.
        rpc UpdateParams (distributed_framework.messages.ReadyForUpdating) returns (distributed_framework.messages.ParamsResponse);
    }

在 line 3 定义了该 proto 文件所对应的包名称（即其他文件能通过该名 import 相应内容），并导入了基础的 ``messages`` 包。
line 9-22 则定义了服务 ``ActorService`` ，需注意，按照语法，服务的所有方法名首字母必须大写，格式为 ``rpc <function_name> (<message_type>) returns (<message_type>);`` 。


.. _chap_modify_rpc-sec_distributed_framework_intro-subsec_actor_service:

:bdg-warning:`actor_service`
++++++++++++++++++++++++++++++++++
本模块提供 *Actor* 服务，具体作用与强化学习中的 *policy* 或 Actor-Critic 架构中的 *actor* 类似，即为采样推理器。
具体而言， *Actor* 服务被调用时，从 *Batching Operator* 接收当前的环境观测 :math:`(s_t, o_t)`，利用策略网络 :math:`\pi` 进行推理，进而返回动作 :math:`a_t`.


.. _chap_modify_rpc-sec_distributed_framework_intro-subsec_batching_operator_service:

:bdg-warning:`batching_operator_service`
+++++++++++++++++++++++++++++++++++++++++++++++
本模块提供 *Batching Operator* 服务，具体作用包括了任务调度、批处理优化、数据同步等。
*Batching Operator* 服务接收分布式部署的环境所传输的状态观测信息，并根据给定参数打包来自一定数目的环境的信息产生一个 batch 的数据，而后将该 batch 数据发送至 *Actor* 服务端进行前向推理采样，获得调用返回的动作后，分别返回给各个环境进行交互。

.. _chap_modify_rpc-sec_distributed_framework_intro-subsec_parameter_service:

:bdg-warning:`parameter_service`
+++++++++++++++++++++++++++++++++++++++++++++++
本模块提供 *Parameter* 服务，即为参数迭代训练模块。
当 *Parameter* 服务端接收到来自 *Actor* 发送来的更新模型参数请求时，会向 *Replay Buffer* 服务发起训练数据的请求，若请求成功，便会调用相应算法的 *learner* 模块更新迭代模型，随着模型更新完成，将传递最新模型参数给发起请求的 *Actor*。

.. _chap_modify_rpc-sec_distributed_framework_intro-subsec_replay_buffer_service:

:bdg-warning:`replay_buffer_service`
+++++++++++++++++++++++++++++++++++++++++++++++
本模块提供 *Replay Buffer* 服务，即强化学习中的经验回放样本池。

.. _chap_modify_rpc-sec_distributed_framework_intro-subsec_simulator:

:bdg-warning:`simulator`
+++++++++++++++++++++++++++++++++++++++++++++++
本模块不提供服务，只作为 *Batching Operator* 的客户端存在，具体作用为强化学习中的环境模块类似，负责仿真交互并生产样本。
每一个部署的 *Simulator* 中将单独运行一个环境 (env)，并通过函数定义了与该环境交互的逻辑与流程，每当与环境交互一步，便会向 *Batching Operator* 服务发起请求并传递当前观测信息，随着接收到动作的返回后，会利用该动作与环境进行交互。


.. _chap_modify_rpc-sec_update_distributed_framework:

如何修改及扩展分布式框架?
===================================


.. _chap_modify_rpc-sec_update_distributed_framework-subsec_update_service:

*gRPC* 服务的扩展修改
+++++++++++++++++++++++++++++++++++++++++++++++++++
本节中将以 **为** ``actor_service`` **添加新的远程调用方法** ``UpdateParams()`` 为例，介绍如何为现有分布式框架添加或修改服务，本节内容主要涉及 :file:`src/distributed_framework` 下的各模块内容，为方便起见，下文中将省略该前缀目录。


更新 proto 文件
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
首先应明确所添加的方法的用途，进而更新 :file:`protos/actor.proto` 文件，在 ``actor_service`` 中添加新的方法。
以 ``UpdateParams()`` 方法为例，它将在 ``batching_operator_service`` 认为当前时刻应进行模型训练迭代时 (on-policy 条件下)，由其发起调用，故而使用了相应的消息类型 ``distributed_framework.messages.ReadyForUpdating``。
（该方法的定义可见前文 :ref:`actor.proto <chap_modify_rpc-sec_distributed_framework_intro-subsec_protos-code_actor_proto>` line 20-21 ）


利用 *gRPC* Python 插件生成相应代码
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
*gRPC* 官方提供了由 *Protobuf3* 生成 Python 代码的插件，为保持运行环境的稳定，在此推荐创建新的 Python 环境来安装相应依赖。

.. code-block:: shell
    :force:

    conda create -n grpc_proto python==3.7.0 -y && conda activate grpc_proto
    pip install grpcio==1.31.0 grpcio-tools==1.31.0 protobuf==3.20.0


而后进入分布式框架的目录中，利用插件根据 :file:`actor.proto` 生成文件

.. code-block:: shell
    :force:

    cd src/distributed_framework
    # generate files defined by ``actor.proto``
    # if you are generating ``data_type`` codes, you can use just one argument ``proto_path`` as ``--proto_path=./protos/data_type``
    python -m grpc_tools.protoc \
        --python_out=./actor_service \
        --grpc_python_out=./actor_service \
        --proto_path=./protos \
        --proto_path=./protos/data_type \
        actor.proto


运行成功后（控制台无新输出），将相应文件 :file:`actor_service/actor_service_pb2.py` 和 :file:`actor_service/actor_service_pb2_grpc.py` 中的模块导入的代码的路径错误进行纠正 (line 14 改为正确路径的 line 15)

.. code-block:: python
    :caption: actor_service/actor_service_pb2.py
    :linenos:
    :force:
    :name: chap_modify_rpc-sec_update_distributed_framework-subsec_update_service-code_pb2


    # -*- coding: utf-8 -*-
    # Generated by the protocol buffer compiler.  DO NOT EDIT!
    # source: actor.proto

    from google.protobuf import descriptor as _descriptor
    from google.protobuf import message as _message
    from google.protobuf import reflection as _reflection
    from google.protobuf import symbol_database as _symbol_database
    # @@protoc_insertion_point(imports)

    _sym_db = _symbol_database.Default()


    # import messages_pb2 as messages__pb2
    from distributed_framework.messages import messages_pb2 as messages__pb2

    ...


最后，在相应的服务端文件 :file:`actor_service/actor_servicer.py` 里继承 :file:`actor_service/actor_service_pb2_grpc.py` 中的基类 ``ActorServiceServicer()``，并详细地实现对应服务方法即可。
