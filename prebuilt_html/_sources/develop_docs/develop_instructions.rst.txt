.. _chap_develop_instructions:

===================================
dist-MARL 开发指南
===================================

本框架的通用开发管理链接包括：

    * `Github Repository <https://github.com/thu-rllab/marl-dev>`_ : 源码
    * `Docs <https://github.com/thu-rllab/marl-doc>`_ : 文档
    * `Project Management <https://pingcode.com/>`_ : 项目协作工具及开发记录


.. _chap_develop_instructions-sec_project_structure:

项目结构
===================================


本项目的根目录下，:file:`docs` 中存放了本框架的文档，:file:`src` 目录中则为框架的源代码，:file:`test` 中存放了测试样例与测试代码，:file:`third_party` 中则为使用的第三方库 (SMAC, Pettingzoo 等源码库)。


.. sidebar:: src/

    * :bdg-warning:`agents`
    * :bdg-warning:`common`
    * :bdg-warning:`config`
    * :bdg-warning:`distributed_framework`
    * :bdg-warning:`envs`
    * :bdg-warning:`utils`
    * :bdg-dark-line:`main.py`
    * :bdg-dark-line:`run_episode_loop.py`

下面将对源代码部分进行简要介绍，具体目录如右侧所示。

:bdg-warning:`agents` 目录中为与多智能体强化学习算法紧密相关的代码实现，其中所有的算法都需继承 ``AgentBase(), LearnerBase()``，前者主要负责智能体的推理和动作的生成，即主要包括模型的前向过程，是智能体的策略网络所在的模块，而后者则负责模型的训练迭代，即主要实现模型的反向过程，是算法的 Loss 函数实现所在的模块。
算法根据各自的类别 (Value based, Actor-Critic based, Policy based 等) 各自存放于不同目录中，且每个算法单独存放于以算法名命名的文件夹内（如 QMix 算法的目录：:file:`src/agents/value_based/qmix/`，其中包含了 :file:`qmix_agent.py, qmix_learner.py, qmix_mixing_network.py` 三个与其算法紧密联系的代码实现)。

:bdg-warning:`common` 目录中为与具体算法联系不太大但会被各算法所使用的代码实现，即为可以被各个算法所公用的模块。

    * :file:`models` 中是使用 Pytorch 所实现的各个基础网络模型（如 MLP，RNN 等），均继承了 :file:`src/common/models/base_nn.py` 中所定义的基类 ``NNBase()``。
    * :file:`action_selector.py` 中实现了多智能体强化学习算法常用的探索策略 (如 :math:`\epsilon`-greedy 策略等)，通常作用于智能体动作决策的最后一步，根据策略网络的输出、当前可执行动作及探索策略进而选取智能体最终的动作。
    * :file:`batch.py` 中是本框架所推荐的基本数据结构 ``Batch()``，其同时具有向量、字典等特性和方法，它被作为分布式模块之间传输的基本数据结构，具体的介绍和使用请参考说明 :ref:`chap_batch`，我们基于 `thu-ml/tianshou <https://github.com/thu-ml/tianshou>`_ 实现了该模块。
    * :file:`replay_buffer.py` 中以 ``Batch()`` 为基础实现了通用的经验回放样本池，包括以样本为单位和以轨迹为单位两种类型，如需实现新的经验回放样本池可以继承基类 ``ReplayBufferBase()``。

:bdg-warning:`config` 目录中存放了各个参数文件，包括环境的参数( :file:`env_cgfs` )、算法的参数( :file:`default_cfgs.yaml, exp_cfgs` )、分布式框架通信的 IP 组( :file:`servers_ip_groups` )等。
其中 :file:`default_cfgs.yaml` 中定义了算法用到的最基本的参数，主程序将首先读取该默认参数而后根据给定的算法参数对其进行更新。

:bdg-warning:`distributed_framework` 目录中为分布式框架的代码实现，主要涉及各模块间的通信及数据基本处理流程，具体请参考章节 :ref:`chap_modify_rpc`。

:bdg-warning:`envs` 目录中是对多智能体环境的封装，主要实现了各环境的 API 接口统一，同时提供了相应环境依赖安装的脚本。

:bdg-warning:`utils` 目录中提供了一些脚本工具，如 ``logger`` 的创建等。

:bdg-dark-line:`main.py` 是本框架的主程序统一入口，通过参数 ``-m <module>`` 指定不同的分布式模块，即可运行起本框架并进行实验。

:bdg-dark-line:`run_episode_loop.py` 中定义了与环境交互一整个 episode 的基础逻辑，若算法对交互逻辑有特殊要求仅需参照函数 ``runEpisodeLoopBase()`` 进行重写即可。


.. _chap_develop_instructions-sec_coding_style:

开发规范
===================================
本节将对框架的文件及变量命名原则、注释风格和 Git 提交原则进行介绍。
dist-MARL 框架的算法及模型主要基于 Python3 及 Pytorch (>=1.7.0) 进行开发设计，而分布式模块的实现则使用了 *gRPC* 及 *Protobuf3* 。
因此本框架的代码风格整体遵循 Python3 的开发规范。


.. _chap_develop_instructions-sec_coding_style-subsec_naming_style:

命名原则
+++++++++++++++++++++++++++++++++++
对于命名，遵循的基本原则是 **应尽可能反应其用途或含义**，一般情况下推荐使用完整的英文进行命名，例如 ``replay_buffer.py``, ``QMixMixingNetwork()`` 等。
极端情况下完整的英文命名可能过长，此时应使用缩写，同时使用缩写时 **应尽可能避免造成误解**，例如 ``configurations`` 可以缩写为 ``configs, cfgs`` 等，但是直接使用 ``c, con`` 等含义不明确的名称是不被允许的。关于缩写的选择可以参照常用变量命名，可以参考 `CODELF <https://unbug.github.io/codelf/>`_ 、 `Abbreviations <https://www.abbreviations.com/>`_ 等网站。


.. rubric:: 文件的命名

文件的命名采用 *下划线命名法* ，即名称中的每一个逻辑断点使用下划线进行分割，例如 ``data_type, replay_buffer_servicer.py`` 等。
不推荐在同一文件中实现过多的功能不同的模块，如有此需求，应根据实现层次、功能区分将其分割为不同的文件并以相应的概括性描述进行命名。


.. rubric:: 类的命名

类的命名采用 *大驼峰命名法* ，即大写每个单词的首字母，例如 ``ServerBase(), ReplayBufferServicer()`` 等，其中基类以 ``***Base()`` 进行结尾。


.. rubric:: 函数的命名

函数的命名采用 *小驼峰命名法* ，便于其和类、变量进行区分，即第一个单词的首字母小写，后面其他单词首字母大写，例如 ``runEpisodeLoopBase(), start(), bulildInputs()`` 等。
虽然许多使用 Python 的库同样使用下划线命名法为函数命名，但是本框架推荐将函数对象本身作为参数传入其他方法，使用小驼峰命名法便于识别该传入参数是函数而非普通变量。

.. note:: 
    在分布式模块的服务端代码中，会出现遵循 *大驼峰命名法* 的函数，例如函数 ``ActorServicer.InitCall()`` ，这是由 Protobuf3 本身要求的语法，即 RPC 方法必须首字母大写，具体可见说明 :ref:`chap_modify_rpc-sec_distributed_framework_intro-subsec_protos` 。


.. rubric:: 变量的命名

变量的命名采用 *下划线命名法* ，例如 ``actions, avail_actions`` 等。
同时，针对特殊的变量类型如字典、 *Protobuf3* 格式、线程锁等，推荐在名称结尾加上相应的类型缩写便于理解区分，例如 ``batch_actions_dict, data_batch_proto, free_pools_lock`` 等。


.. _chap_develop_instructions-sec_coding_style-subsec_whitespaces:

空格与水平留白
+++++++++++++++++++++++++++++++++++
省略所有空格的代码或许精简，但是不利于阅读；而有的代码时而有换行，时而无换行，十分不统一。
在此，对本框架的代码的水平留白原则给出一定范例。

首先，本框架内所有 Python 代码的缩进使用 4 个空格，若您使用 vscode，请进入 **设置** :menuselection:`-->` **编辑器** :menuselection:`-->` **制表符大小** ( **Settings** :menuselection:`-->` **Editor** :menuselection:`-->` **Tab size** ) 将单个制表符设置为 ``4`` 。

为了便于阅读，二元操作符左右需有 **1 个** 空格：

.. code-block:: python
    :linenos:

    t_step += 1

    loss = - ((advantages * log_pi_taken) * mask).sum() / mask.sum()


顶级定义间（类与类、函数与函数间）使用 **2 行** 留白空格进行分隔，而类内函数则使用 **1 行** 留白空格分隔：

.. code-block:: python
    :linenos:

    def funcOne(arg_1: int) -> int:
        return arg_1 + 1

    
    def funcTwo(arg_2: int) -> int:
        return arg_2 + 2

    
    class ClsOne:

        def __init__(arg_3: int):
            self.arg_3 = arg_3
        
        def clsOneFuncOne(self, arg_4: int) -> int:
            return self.arg_3 + arg_4

    
    class ClsTwo:

        def __init__(arg_5: int):
            self.arg_5 = arg_5
        
        def clsTwoFuncOne(self, arg_6: int) -> int:
            return self.arg_5 * arg_6


    def funcThree(arg_7: int) -> int:
        return arg_7 + 3


函数传入参数较多时，可通过换行的方法改进代码阅读体验。
当参数不是太多时，直接对齐参数即可，反括号与最后一个参数同一行；当参数过多时，正括号与函数保持同一行，变量的传入另起一行并添加 1 个缩进，反括号保持与函数本体同样的缩进：

.. code-block::
    :linenos:

    # multiple arguments
    func(arg_1,
         arg_2,
         arg_3)

    # or too many arguments
    func(
        arg_1,
        ...,
        arg_N
    )


在逻辑层面具有连续功能的代码块，在前后各设置 **1 行** 留白空格，内部不加留白空格行：

.. code-block:: python
    :linenos:
    :caption: Blank Line - Example 1

    # some other codes
    ...

    # blank line before the ``for-loop``
    # the initialization of the var ``j`` is closely linked to the ``for-loop`` logic, no blank line
    j = 0
    for i in range(10):
        print(i)

        # blank line before ``if``
        if i == 5:
            j = i
            print("asign ``j`` with ``i``!")
        
        if i == 7:
            break

    # blank line after the ``for-loop``
    print(j)


.. code-block:: python
    :linenos:
    :caption: Blank Line - Example 2

    class Cls(ClsBase):

        def __init__(arg_1: int, arg_2: int):
            # assign in-class variables by incoming arguments
            self.arg_1 = arg_1
            self.arg_2 = arg_2

            # blank line after the 'assigning block'
            # initialize some variables
            self.list = []
            self.dict = {}
            self.some_var = None

            # blank line after the 'initializing block'
            self._func()
        
        def _func(self) -> int:
            print('Now in self._func()')

            # blank line before the ``while-loop``
            max_num = self.arg_1
            i = 0
            while i <= max_num:
                i = i + 1
            
            # blank line after the ``while-loop``
            self.some_var = i

            # blank line before ``return``
            return self.some_var


.. _chap_develop_instructions-sec_coding_style-subsec_comments_style:

注释风格
+++++++++++++++++++++++++++++++++++
首先请注意，所有的代码注释中不允许使用中文以避免造成一些环境下文件格式的编码混乱。
本框架开发的整体注释风格主要参考了 `Google Python Style <https://google.github.io/styleguide/pyguide.html#s3.8-comments-and-docstrings>`_ 。

    * 针对函数和类的注释使用文档字符串，即使用 ``"""`` 开始与结束，在其内部说明函数或类的功能，输入参数，返回值或返回迭代器的信息，以及与接口有关的异常情况。与 *Google Python Style* 略有不同的是，我们鼓励将函数功能的总结置于注释开始的 ``"""`` 的下一行便于阅读，具体可见下方给出的例子。对于注释内涉及到的变量、函数、类和路径，使用两对 *上点号* 进行标注，如 ````var```` 。同时，可以通过 ``Note:`` 添加注意事项或 ``e.g.:`` 添加示例等。
    * 对部分代码逻辑进行解释性注释时，使用 ``#`` 在代码块的起始位置上方进行注释，或针对某行代码特别注释时可在该行代码右侧。而待完善的功能可在其上方标注 ``#TODO：some work need to be done`` 避免遗忘。


此外，对函数或类内方法进行定义时，应对每个参数的类型和函数的返回值类型进行标示（部分功能需导入 typing 模块），如 ``def func(arg: int) -> int:``，具体规则可参考 `Type Annotated Code <https://google.github.io/styleguide/pyguide.html#s2.21-type-annotated-code>`_ 和 `PEP-484 <https://peps.python.org/pep-0484/>`_ 。

下面给出简单的例子：

.. code-block:: python

    def funcOne(arg_1: float, arg_2: Union[int, numpy.ndarray], arg_3: Optional[bool] = True) -> numpy.ndarray:
        """
        Add ``arg_1`` to ``arg_2`` only when ``arg_3`` is set to ``True``.

        some detailed descriptions of this function.

        Note:
            some notes about ``funcOne()``.

        Args:
            arg_1 (float): some descriptions of arg_1.
            arg_2 (int or numpy.ndarray): some descriptions of arg_2.
            arg_3 (bool, optional): some descriptions of arg_3, defaults to True.
        
        Returns:
            numpy.ndarray, int: **[return_var_1, return_var_2]**: some descriptions of the returns.
        
        Raises:
            AssertionError: An error occurred when the type of ``arg_1`` is not ``int``.
        
        e.g.:
            >>> funcOne(0.1, 2)
            numpy.array(2.1, dtype=numpy.float32), 1
            >>> funcOne(0.1, 2, arg_3=False)
            numpy.array(2, dtype=numpy.float32), 0
            >>> funcOne(0.1, numpy.array([1, 2]))
            numpy.array([1.1, 2.1], dtype=numpy.float32), 1
        """
        assert type(arg_1) is int       # assert the type of ``arg_1`` is ``int``

        # some comments
        # about the code block
        if arg_3:
            return numpy.array(arg_1 + arg_2, dtype=numpy.float32), 1
        else:
            return numpy.array(arg_2, dtype=numpy.float32), 0


    class ClientBase:
        """
        Base class for clients.

        Detailed description of this class.

        Attributes:
            arg_1 (float): some descriptions of arg_1.
            arg_2 (int): some descriptions of arg_2.
        """

        def __init__(self, arg: float):
            """
            Initialize the instance based on ``arg``.

            Args:
                arg (float): some descriptions of arg.
            """
            self.arg_1 = arg
            self.arg_2 = 0

        def method(self):
            """
            Perform some operations.
            """
            # TODO: some operations should be implemented
            pass

.. _chap_develop_instructions-sec_coding_style-subsec_git_usages:

Git 版本控制与协作
+++++++++++++++++++++++++++++++++++
本框架的开发使用 Git 进行版本控制与协作开发。本项目中，各分支的主要功能及注意事项如下：

    * 主分支为 ``main`` 分支，仅在发布稳定版本或 pre 新版本时进行更新，向主分支的 merge 操作须经过至少两个主负责人的代码审查。
    * 开发分支为 ``dev`` 分支，向开发分支的 merge 操作，需先在功能的独立分支预先更新开发分支的最新代码，并测试功能的完好性后再合并。对每次提交需总结其主要内容，是查看 ``git log`` 时必需的信息，每次提交中需添加相应 Type 标示，规范语法为 ``<type>[(<scope>)]: <short summary>``， 如 ``feat(models): add Transformer model.`` , ``feat(algo): add new algo 'COMA'.`` 。

        * Type 表明了本次提交的主要类型，如新功能 (feat)、bug 修复 (fix) 等，Type 的具体类型可见 :ref:`Type 类型表 <chap_develop_instructions-sec_coding_style-subsec_git_usages-table_git_commit_types>` 。
        * Scope 是可选项，根据修改所影响的内容而定，常见类型包括 a) 模块名: ``models, envs`` 等； b) 所属分类: ``algo, example`` 等。
        * Short summary 是对本次提交的简短描述，要求如下：

            * 不超过 50 个字符；
            * 动词开头，使用第一人称现在时，比如 change 而不是 changes 或 changed；
            * 每句话的第一个字母小写；
            * 结尾添加句点 ``.``；

    * 测试分支为 ``test`` 分支，应在每个功能开发完善后，在该分支下跟进相应的单元测试与测试案例。
    * 新功能的开发应基于当前最新 ``dev`` 分支，使用 ``git checkout -b <branch_name>`` 新建新的功能独立分支，而后在新的独立分支下进行开发。当完成开发并向 ``dev`` 分支进行合并时，可以酌情考虑使用 ``--squash`` 进行变基。


.. _chap_develop_instructions-sec_coding_style-subsec_git_usages-table_git_commit_types:

.. rubric:: Type 类型表

+------------+-----------------------------------------------------------------------------------------------------------------+
|Type        |含义                                                                                                             |
+============+=================================================================================================================+
|feat        |新功能，功能变更                                                                                                 |
+------------+-----------------------------------------------------------------------------------------------------------------+
|fix         |对 bug 的修复，在 ``<short summary>`` 中描述相应 bug                                                             |
+------------+-----------------------------------------------------------------------------------------------------------------+
|docs        |更新文档或 API 注释                                                                                              |
+------------+-----------------------------------------------------------------------------------------------------------------+
|perf        |对项目或模块进行了性能或逻辑优化，不涉及显著的新功能和大的架构更改。                                             |
|            |例如影响实验结果的参数或将变量更改为更切合的新名字                                                               |
+------------+-----------------------------------------------------------------------------------------------------------------+
|refactor    |重构代码。代码结构的调整                                                                                         |
+------------+-----------------------------------------------------------------------------------------------------------------+
|chore       |不涉及源码 (src)、文档 (docs) 和 测试 (test) 的其他改动。                                                        |
|            |如一些注释修改和文件清理，修改了 :file:`.gitignore` 等。                                                         |
+------------+-----------------------------------------------------------------------------------------------------------------+
|style       |代码显示格式调整，如执行了 format 或更改了 tab 显示等，通常为了可读性和清晰美观                                  |
+------------+-----------------------------------------------------------------------------------------------------------------+
|test        |添加了单元测试等                                                                                                 |
+------------+-----------------------------------------------------------------------------------------------------------------+
|build       |影响编译的更改，如添加了新的依赖等                                                                               |
+------------+-----------------------------------------------------------------------------------------------------------------+
|revert      |回滚版本                                                                                                         |
+------------+-----------------------------------------------------------------------------------------------------------------+


.. _chap_develop_instructions-sec_coding_style-subsec_docs_wrting:

文档撰写
+++++++++++++++++++++++++++++++++++
本框架的文档基于 ReStructuredText (RST) 进行撰写开发，具体的环境配置以及撰写可参照 `PingCode <https://pingcode.com/>`_ 内的文档记录和指引。
